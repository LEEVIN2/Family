<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- 여기서 MemberService memberService = new MemberService(); 객체생성 할거임 -->
	<!-- memberService를 memberController에 전달하면 memberService로 전달하게 할거임 -->
	
	<!-- id = memberService, class = new MemberService(); -->
	<!-- 멤버변수 = memberService, 객체 = new MemberService(); -->
	
	<!-- 1) 생성자 호출 : constructor-arg => 객체생성값을 전달 -->
	<!-- 2) set메서드 호출 : property => 객체생성값을 전달 -->
	
	<!-- <property name="set메서드호출" ref="memberService의 주소값(객체생성 주소값, 밑의 id)"></property> -->
	
	<!-- 이제 자동화 할거라서 -->
<!-- 	<bean id="memberController" class="com.itwillbs.controller.MemberController"> -->
<!-- 		<constructor-arg name="memberService" ref="memberService"></constructor-arg> -->
<!-- 		<property name="memberService" ref="memberService"></property> -->
<!-- 	</bean> -->
	
<!-- 	<bean id="memberService" class="com.itwillbs.service.MemberService"> -->
<!-- 		<property name="memberDAO" ref="memberDAO"></property> -->
<!-- 	</bean> -->
	
<!-- 	<bean id="memberDAO" class="com.itwillbs.dao.MemberDAO"> -->
<!-- 		<property name="dataSource" ref="dataSource"></property> -->
<!-- 	</bean> -->
	
	
	<!-- DB연결을 위해 할일 -->
	<!-- 1) 프로그램 설치 : JDBC, spring JDBC (자동으로 프로그램 설치할건데, 자동으로 하기위해선 Maven이라는 프로그램이 필요하고, 스프링에선 자동으로 설치되어있음)
	 	  	Maven에서 코드 검색 후 pom.xml에 코드 넣으면 자동으로 프로그램이 다운받아짐 (pom.xml참고하기) -->
	 	  	
	<!-- 2)디비연결 객체생성 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://211.184.171.25:3306/family?serverTimezone=Asia/Seoul"></property>
		<property name="username" value="dlqls47"></property>
		<property name="password" value="aksdnr12!"></property>
	</bean>
	

	<!-- MyBatis 환경설정 -->
	<!-- https://mybatis.org/mybatis-3/ko/getting-started.html -->
	<!-- value="환경설정 파일위치/sql파일위치" -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
	</bean>
	
	<!-- MyBatis 연결해서 세션만들기 -->
	<!-- MemberDAO 자동객체생성 : @Injsect private SqlSession sqlSession; -->
	<!-- destroy-method="clearCache" : 자동으로 가억장소 삭제 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<!-- navermail설정 -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> 
     <property name="host" value="smtp.naver.com"/> <!-- 메이서버 호스트 -->
     <property name="port" value="465"/> <!-- 메이서버 포트번호 -->
     <property name="username" value="sonminuk@naver.com"/> <!-- 자신의 이메일 아이디 -->
     <property name="password" value="rhrnak119!"/> <!-- 자신의 비밀번호 -->
       <!-- 보안연결 SSL과 관련된 설정 -->
     <property name="javaMailProperties">
      <props>
      <prop key="mail.smtp.auth">true</prop>
      <prop key="mail.smtp.starttls.enable">true</prop>
      <prop key="mail.smtps.checkserveridentity">true</prop>
      <prop key="mail.smtps.ssl.trust">*</prop>
      <prop key="mail.debug">true</prop>
      <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
      </props>
     </property>
    </bean>
    
    <!-- 다중파일 업로드 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- max upload size in bytes -->
<!--         한 번에 업로드할 수 있는 파일의 최대 크기 -->
        <property name="maxUploadSize" value="10485760" /> <!-- 5MB -->
        <!-- max size of file in memory (in bytes) -->
<!--         파일이 서버의 메모리에 저장될 때 사용할 수 있는 최대 메모리 크기를 지정 -->
<!--         maxInMemorySize가 maxUploadSize보다 작은 경우, 파일은 메모리에 일부만 저장되고 나머지는 임시 디스크 공간에 저장됩니다. 이렇게 하면 메모리 사용량을 줄일 수 있습니다. 그러나 이 경우, 디스크 I/O가 증가하여 성능이 저하될 수 있습니다. -->
        <property name="maxInMemorySize" value="5242880" /> <!-- 1MB -->
        <property name="defaultEncoding" value="UTF-8"></property>
    </bean>
	
</beans>